#worker_processes  auto;
#worker_processes  4;
worker_processes  1;
rtmp_auto_push on;
events {
    worker_connections  1024;
}

# RTMP configuration
rtmp {
    server {
        listen 1935; # Listen on standard RTMP port
        chunk_size 4000;
        ping 30s;
        notify_method get;

        
        
        # TV mode: one publisher, many subscribers
        application mytv {

            # enable live streaming
            live on;

            #record first 1K of stream
            record all;
            record_path /tmp/av;
            record_max_size 1K;

            # append current timestamp to each flv
            record_unique on;

            # publish only from localhost
            allow publish all;
            #deny publish all;
            allow play all;
        }
#
#        # Transcoding (ffmpeg needed)
#        application big {
#            live on;
#
            # On every pusblished stream run this command (ffmpeg)
            # with substitutions: $app/${app}, $name/${name} for application & stream name.
            #
            # This ffmpeg call receives stream from this application &
            # reduces the resolution down to 32x32. The stream is the published to
            # 'small' application (see below) under the same name.
            #
            # ffmpeg can do anything with the stream like video/audio
            # transcoding, resizing, altering container/codec params etc
            #
            # Multiple exec lines can be specified.
#
#            exec ffmpeg -re -i rtmp://localhost:1935/$app/$name -vcodec flv -acodec copy -s 32x32
#                        -f flv rtmp://localhost:1935/small/${name};
#        }
#
#        application small {
#            live on;
#            # Video with reduced resolution comes here from ffmpeg
#        }
#
#        application webcam {
#            live on;
#
#            # Stream from local webcam
#            exec_static ffmpeg -f video4linux2 -i /dev/video0 -c:v libx264 -an
#                               -f flv rtmp://localhost:1935/webcam/mystream;
#        }
#
#        application mypush {
#            live on;
#
#            # Every stream published here
#            # is automatically pushed to
#            # these two machines
#            push rtmp1.example.com;
#            push rtmp2.example.com:1934;
#        }        
#        
#        application mypull {
#            live on;
#
#            # Pull all streams from remote machine
#            # and play locally
#            pull rtmp://rtmp3.example.com pageUrl=www.example.com/index.html;
#        }
#
#        application mystaticpull {
#            live on;
#
#            # Static pull is started at nginx start
#            pull rtmp://rtmp4.example.com pageUrl=www.example.com/index.html name=mystream static;
#        }
#
#        # video on demand
#        application vod {
#            play /var/flvs;
#        }
#
#        application vod2 {
#            play /var/mp4s;
#        }        
        
        # HLS

        # For HLS to work please create a directory in tmpfs (/tmp/hls here)
        # for the fragments. The directory contents is served via HTTP (see
        # http{} section in config)
        #
        # Incoming stream must be in H264/AAC. For iPhones use baseline H264
        # profile (see ffmpeg example).
        # This example creates RTMP stream from movie ready for HLS:
        #
        # ffmpeg -loglevel verbose -re -i movie.avi  -vcodec libx264
        #    -vprofile baseline -acodec libmp3lame -ar 44100 -ac 1
        #    -f flv rtmp://localhost:1935/hls/movie
        #
        # If you need to transcode live stream use 'exec' feature.
        #        
        
        application hls {
            live on;
            # Turn on HLS
            hls on;
            hls_path /tmp/hls/;
            hls_fragment 3;
            hls_playlist_length 60;
            hls_sync 100ms;
            # disable consuming the stream from nginx as rtmp
            #deny play all;
        }
        

        # MPEG-DASH is similar to HLS

        application dash {
            
            live on;
            record off;
            #allow publish all;
            #allow publish 127.0.0.1;
            #deny publish all;

            # Copy incoming streams to the HLS application
            exec ffmpeg -re -i rtmp://localhost:1935/$app/$name -c:v copy -c:a copy -f flv rtmp://localhost:1935/hls/${name};

            dash on;
            dash_nested on;
            dash_path /tmp/dash;
            dash_fragment 3;
            dash_playlist_length 120;
            dash_cleanup on;

            #dash_clock_compensation http_head;
            #dash_clock_helper_uri https://<your_server_domain_here>/time;

            #dash_variant _low  bandwidth="500000"  width="640"  height="360";
            #dash_variant _med  bandwidth="1500000" width="1280"  height="720";
            #dash_variant _high bandwidth="5000000" width="1920" height="1080" max;            
            
            
        }        
        
    }
}

http {
    sendfile off;
    tcp_nopush on;
    directio 512;
    default_type application/octet-stream;

    server {
        listen 8090;

        location /dash {
            # Serve DASH fragments
            root /tmp;
            add_header Cache-Control no-cache;
        }        
        
        location /hls {
            # Disable cache
            add_header 'Cache-Control' 'no-cache';

            # CORS setup
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length';

            # allow CORS preflight requests
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }

            types {
                application/dash+xml mpd;
                application/vnd.apple.mpegurl m3u8;
                video/mp2t ts;
            }

            root /tmp/;
        }
        # rtmp stat
        location /stat {
            rtmp_stat all;
            rtmp_stat_stylesheet stat.xsl;
        }
        location /stat.xsl {
            # you can move stat.xsl to a different location
            root /usr/build/nginx-rtmp-module;
        }

        # rtmp control
        location /control {
            rtmp_control all;
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
}

